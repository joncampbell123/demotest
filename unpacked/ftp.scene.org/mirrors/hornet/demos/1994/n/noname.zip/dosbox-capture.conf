# This is the configuration file for DOSBox 0.800. (Please use the latest version of DOSBox)
# Lines starting with a # are comment lines and are ignored by DOSBox.
# They are used to (briefly) document the effect of each option.
[dosbox]
memsize=16

[cpu]
core=normal
cputype=386
cycles=12000

[dos]
ems=false
umb=false
xms=true

[gus]
gus=true

[sblaster]
sbtype=sbpro2
# ^ NTS: Weird behavior observed. The sample rate used by the demo will change
#        depending on whether it detects Sound Blaster or Sound Blaster Pro.
#        sbtype=sb2 makes it use 21637Hz and sbtype=sbpro2 makes it use 22222Hz.
#        use sbtype=sb16 for better quality playback since the demo is unaware
#        how to bypass SB Pro lowpass filter (mixer filter bit).

#   NTS: This demo uses "flat real mode" to play music from extended memory.
#        It uses XMS to allocate said extended memory. However for some strange
#        reason, the demo also calls both Global and Local Disable A20 gate
#        functions of the XMS driver, which means that if the XMS block is on
#        an odd megabyte, it will corrupt surrounding XMS memory with it's
#        audio, AND if the XMS block is just above the start of extended
#        memory, the demo will corrupt conventional (below 1MB) memory!
#
#        There are two ways to run this demo without crashing.
#
#        The first way is to lock the A20 gate on, so that it cannot turn
#        it off.
#
#        [dosbox]
#        a20=on
#
#        The second way, is to use LOADFIX -xms to consume the first 1MB
#        of extended memory so that when the demo allocates XMS the block
#        sits at 2MB or higher where it can't harm anything, A20 gate
#        alias or not.
#
#        This demo happens to work with DOSBox-SVN because DOSBox-SVN
#        (the main DOSBox project) implements the A20 gate using a cheap
#        remapping trick with the first 64KB of extended memory rather
#        than by gating all memory access.
#
#        How did this demo ever work at the demoparty?? Luck? Such code
#        could easily cause corruption of anything else occupying XMS
#        memory, especially disk caches!
#
#  TODO: Run this demo on real hardware and MS-DOS installations and
#        determine whether a) The demo runs with A20 off b) Typical
#        XMS memory address and c) Whether it truly does corrupt
#        surrounding XMS memory.

[autoexec]
@echo off
mount c: .
c:
REM ------ MENU -------
cls
DSXMENU CAPMENU.INI
cls
REM ------ RUN THE DEMO -------
LOADFIX -xms -1024
DX-CAPTURE /V /A NONAME.EXE
